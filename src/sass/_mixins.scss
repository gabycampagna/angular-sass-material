@mixin clearfix {
    &:after {
      content: "";
      display: table;
      clear: both;
    }
  }

  @mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity = $opacity-ie); //IE8
  }

  @mixin position($position, $args) {
    @each $o in top right bottom left {
      $i: index($args, $o);
      @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
        #{$o}: nth($args, $i + 1);
      }
    }
    position: $position;
  }
  
  // Positioning helpers
  @mixin absolute($args: '') {
    @include position(absolute, $args);
  }
  
  @mixin fixed($args: '') {
    @include position(fixed, $args);
  }
  
  @mixin relative($args: '') {
    @include position(relative, $args);
  }

  @mixin font-size($size, $base: 16) {
    font-size: $size; // fallback for old browsers
    font-size: ($size / $base) * 1rem;
  }

  @mixin prefix($property, $value, $vendors: webkit moz ms o, $default: true) {
    @if $vendors {
      @each $vendor in $vendors {
        #{"-" + $vendor + "-" + $property}: #{$value};
      }
    }
    @if $default {
      #{$property}: #{$value};
    }
  }

  @mixin gradient($start-color, $end-color, $orientation) {
    background: $start-color;
    @if $orientation == 'vertical' {
      background: -webkit-linear-gradient(top, $start-color, $end-color);
      background: linear-gradient(to bottom, $start-color, $end-color);
    } @else if $orientation == 'horizontal' {
      background: -webkit-linear-gradient(left, $start-color, $end-color);
      background: linear-gradient(to right, $start-color, $end-color);
    } @else {
      background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
      background: radial-gradient(ellipse at center, $start-color, $end-color);
    }
  }
  